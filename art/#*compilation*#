-*- mode: compilation; default-directory: "~/dev/motile_artificial_chemistry/" -*-
Compilation started at Tue Oct 22 22:34:14

(cd /home/megb269/dev/motile_artificial_chemistry/ && python3 main.py)
[INFO   ] [Logger      ] Record log in /home/megb269/.kivy/logs/kivy_19-10-22_58.txt
[INFO   ] [Kivy        ] v1.10.1
[INFO   ] [Python      ] v3.6.8 (default, Oct  7 2019, 12:59:55) 
[GCC 8.3.0]
pygame 1.9.6
Hello from the pygame community. https://www.pygame.org/contribute.html
[INFO   ] [Image       ] Providers: img_tex, img_dds, img_pygame, img_pil, img_gif (img_ffpyplayer ignored)
[INFO   ] [Text        ] Provider: pygame
[INFO   ] [Factory     ] 194 symbols loaded
SEED is 14

def dydt(y,t):
    # load state variables
    oh,x,xx = y

    # calculate derivatives
    d_oh = 0.0  # env variable
    d_x = 0.2*oh*xx
    d_xx = -0.1*oh*xx
    # return derivatives
    return d_oh,d_x,d_xx
        


MOLECULES
=========
        oh: (0.100000)         x: (1.000000)        xx: (0.500000)

REACTIONS
=========
xx + oh <--> x + x(kf=0.10; kb=0.00) 
	
Total growth: 0.000000

[INFO   ] ==== Activating Rvit ====
[INFO   ] Creating directory (/home/megb269/Dropbox/dev/motile_artificial_chemistry/.rvit) for Rvit.
[INFO   ] [Parameter file] /home/megb269/Dropbox/dev/motile_artificial_chemistry/.rvit/parameters.p
[WARNING] [Lang   ] The file /home/megb269/Dropbox/dev/rvit/rvit/core/rvit.kv is loaded multiples times, you might have unwanted behaviors.
[INFO   ] [Window ] Provider: pygame(['window_egl_rpi'] ignored)
[INFO   ] [GL     ] Using the "OpenGL" graphics system
[INFO   ] [GL     ] Backend used <gl>
[INFO   ] [GL     ] OpenGL version <b'4.6.0 NVIDIA 396.54'>
[INFO   ] [GL     ] OpenGL vendor <b'NVIDIA Corporation'>
[INFO   ] [GL     ] OpenGL renderer <b'GeForce MX150/PCIe/SSE2'>
[INFO   ] [GL     ] OpenGL parsed version: 4, 6
[INFO   ] [GL     ] Shading version <b'4.60 NVIDIA'>
[INFO   ] [GL     ] Texture max size <32768>
[INFO   ] [GL     ] Texture max units <32>
[INFO   ] [Window ] virtual keyboard not allowed, single mode, not docked
[INFO   ] [Loading shader]: graph_renderer.glsl
---VERTEX SHADER---
#version 120
#ifdef GL_ES
    precision highp float;
#endif
 
/* Outputs to the fragment shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* vertex attributes */
attribute vec2     v_pos;



/* uniform variables */
uniform mat4       modelview_mat;
uniform mat4       projection_mat;
uniform vec4       color;
uniform float      vmin; // scales gradient
uniform float      vmax; // scales gradient

void main() {
  frag_color = color;
  tex_coord0 = vec2(0.0,(v_pos.y-vmin)/(vmax-vmin));
  gl_Position = projection_mat * modelview_mat * vec4(v_pos.xy, 0.0, 1.0);
}

---FRAGMENT SHADER--- 
#version 120
#ifdef GL_ES
    precision highp float;
#endif

/* Outputs from the vertex shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* uniform texture samplers */
uniform sampler2D gradient_texture;

uniform vec2 player_pos;
uniform vec2 window_size; // in pixels
void main (void){
  
  gl_FragColor = vec4(frag_color);
  
}

/* Local Variables: */
/* compile-command: "cd .. && python main.py" */
/* python-main-file: "main.py" */
/* python-working-dir: "../" */
/* End: */

on_gradient() plasma
[INFO   ] [Loading shader]: graph_renderer.glsl
---VERTEX SHADER---
#version 120
#ifdef GL_ES
    precision highp float;
#endif
 
/* Outputs to the fragment shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* vertex attributes */
attribute vec2     v_pos;



/* uniform variables */
uniform mat4       modelview_mat;
uniform mat4       projection_mat;
uniform vec4       color;
uniform float      vmin; // scales gradient
uniform float      vmax; // scales gradient

void main() {
  frag_color = color;
  tex_coord0 = vec2(0.0,(v_pos.y-vmin)/(vmax-vmin));
  gl_Position = projection_mat * modelview_mat * vec4(v_pos.xy, 0.0, 1.0);
}

---FRAGMENT SHADER--- 
#version 120
#ifdef GL_ES
    precision highp float;
#endif

/* Outputs from the vertex shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* uniform texture samplers */
uniform sampler2D gradient_texture;

uniform vec2 player_pos;
uniform vec2 window_size; // in pixels
void main (void){
  
  vec4 t = texture2D(gradient_texture, tex_coord0);
  gl_FragColor = vec4(t.rgb,1.0);
  
}

/* Local Variables: */
/* compile-command: "cd .. && python main.py" */
/* python-main-file: "main.py" */
/* python-working-dir: "../" */
/* End: */

surface_tension.gradient
viridis
on_gradient() viridis
[INFO   ] [Loading shader]: graph_renderer.glsl
---VERTEX SHADER---
#version 120
#ifdef GL_ES
    precision highp float;
#endif
 
/* Outputs to the fragment shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* vertex attributes */
attribute vec2     v_pos;



/* uniform variables */
uniform mat4       modelview_mat;
uniform mat4       projection_mat;
uniform vec4       color;
uniform float      vmin; // scales gradient
uniform float      vmax; // scales gradient

void main() {
  frag_color = color;
  tex_coord0 = vec2(0.0,(v_pos.y-vmin)/(vmax-vmin));
  gl_Position = projection_mat * modelview_mat * vec4(v_pos.xy, 0.0, 1.0);
}

---FRAGMENT SHADER--- 
#version 120
#ifdef GL_ES
    precision highp float;
#endif

/* Outputs from the vertex shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* uniform texture samplers */
uniform sampler2D gradient_texture;

uniform vec2 player_pos;
uniform vec2 window_size; // in pixels
void main (void){
  
  vec4 t = texture2D(gradient_texture, tex_coord0);
  gl_FragColor = vec4(t.rgb,1.0);
  
}

/* Local Variables: */
/* compile-command: "cd .. && python main.py" */
/* python-main-file: "main.py" */
/* python-working-dir: "../" */
/* End: */

on_gradient() viridis
[INFO   ] [Loading shader]: graph_renderer.glsl
---VERTEX SHADER---
#version 120
#ifdef GL_ES
    precision highp float;
#endif
 
/* Outputs to the fragment shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* vertex attributes */
attribute vec2     v_pos;



/* uniform variables */
uniform mat4       modelview_mat;
uniform mat4       projection_mat;
uniform vec4       color;
uniform float      vmin; // scales gradient
uniform float      vmax; // scales gradient

void main() {
  frag_color = color;
  tex_coord0 = vec2(0.0,(v_pos.y-vmin)/(vmax-vmin));
  gl_Position = projection_mat * modelview_mat * vec4(v_pos.xy, 0.0, 1.0);
}

---FRAGMENT SHADER--- 
#version 120
#ifdef GL_ES
    precision highp float;
#endif

/* Outputs from the vertex shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* uniform texture samplers */
uniform sampler2D gradient_texture;

uniform vec2 player_pos;
uniform vec2 window_size; // in pixels
void main (void){
  
  vec4 t = texture2D(gradient_texture, tex_coord0);
  gl_FragColor = vec4(t.rgb,1.0);
  
}

/* Local Variables: */
/* compile-command: "cd .. && python main.py" */
/* python-main-file: "main.py" */
/* python-working-dir: "../" */
/* End: */

surface_tension.vmax
0.025
surface_tension.bounds
[0, 1.0, 0.0, 0.025]
surface_tension.column_gap
0.0
surface_tension.fill
columns
surface_tension.color
[1.0, 1.0, 1.0, 1]
self.mesh_indices = self.simulation.drawing.c_ring_indices
env.mag_filter
linear
self.click_callback = self.simulation.env.clicked_at
[INFO   ] [ProbeSysfs] device match: /dev/input/event10
[INFO   ] [MTD    ] Read event from </dev/input/event10>
[INFO   ] [Base   ] Start application main loop
[WARNING] [MTD    ] Unable to open device "/dev/input/event10". Please ensure you have the appropriate permissions.
 main.py:63: RuntimeWarning: divide by zero encountered in log10
   conc = np.log10(ind.sections[section_i].concentrations[mol])
[INFO   ] [Loading shader]: array_renderer.glsl
---VERTEX SHADER---
#version 120
#ifdef GL_ES
    precision highp float;
#endif
 
/* Outputs to the fragment shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* vertex attributes */
attribute vec2     v_pos;
attribute vec2     v_tc0;

/* uniform variables */
uniform mat4       modelview_mat;
uniform mat4       projection_mat;
uniform vec4       color;
uniform float      opacity;






void main() {
  frag_color = color * vec4(0.0, 1.0, 1.0, opacity);
  tex_coord0 = v_tc0;
  gl_Position = projection_mat * modelview_mat * vec4(v_pos.xy, 0.0, 1.0);
}

---FRAGMENT SHADER--- 
#version 120
#ifdef GL_ES
    precision highp float;
#endif

varying vec4 frag_color;
varying vec2 tex_coord0;

/* uniform texture samplers */
uniform sampler2D array_texture;

void main (){
  // vec4 t = texture2D(texture0, tex_coord0);
  // //vec4 t = texture(texture0, tex_coord0);
  // //gl_FragColor = vec4(0.0,0.0,1.0,1.0);//t;//vec4(-t.r,t.r,0.0,1.0);
  // gl_FragColor = vec4(t);//vec4(-t.r,t.r,0.0,1.0);

  vec4 value = texture2D(array_texture, tex_coord0);

  
  gl_FragColor = vec4(value);
  

}

/* Local Variables: */
/* compile-command: "cd .. && python main.py" */
/* python-main-file: "main.py" */
/* python-working-dir: "../" */
/* End: */

[INFO   ] [GL     ] NPOT texture support is available
[INFO   ] [Loading shader]: line_renderer.glsl
---VERTEX SHADER---
#version 120
#ifdef GL_ES
    precision highp float;
#endif
 
/* Outputs to the fragment shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* vertex attributes */
//attribute vec2     v_pos;
attribute float x;
attribute float y;
attribute float color1D;

/* uniform variables */
uniform mat4       modelview_mat;
uniform mat4       projection_mat;
uniform vec4       color;



// testing


vec3 hsv2rgb(vec3 c) {
  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}


void main() {
  
  vec3 rgb = hsv2rgb(vec3(color1D,1.0,1.0));
  frag_color = vec4(rgb,color.w) ;
  
  
  
  gl_PointSize = 1.0;
  

  
  tex_coord0 = vec2(0.0, 0.0); // not used
  
  
  vec2 v_pos = vec2(x,y);
  gl_Position = projection_mat * modelview_mat * vec4(v_pos.xy, 0.0, 1.0);
}

---FRAGMENT SHADER---
#version 120
#ifdef GL_ES
    precision highp float;
#endif
/* Outputs from the vertex shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* uniform texture samplers */
uniform sampler2D gradient_texture;

// uniform vec2 player_pos;
// uniform vec2 window_size; // in pixels
void main (void){
  
  gl_FragColor = vec4(frag_color);
  
  //gl_FragColor = vec4(1.,0.,0.,1.);
}
[INFO   ] [Loading shader]: line_renderer.glsl
---VERTEX SHADER---
#version 120
#ifdef GL_ES
    precision highp float;
#endif
 
/* Outputs to the fragment shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* vertex attributes */
//attribute vec2     v_pos;
attribute float x;
attribute float y;

/* uniform variables */
uniform mat4       modelview_mat;
uniform mat4       projection_mat;
uniform vec4       color;




vec3 hsv2rgb(vec3 c) {
  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}


void main() {
  
  frag_color = color;
  
  
  
  gl_PointSize = 1.0;
  

  
  tex_coord0 = vec2(0.0, 0.0); // not used
  
  
  vec2 v_pos = vec2(x,y);
  gl_Position = projection_mat * modelview_mat * vec4(v_pos.xy, 0.0, 1.0);
}

---FRAGMENT SHADER---
#version 120
#ifdef GL_ES
    precision highp float;
#endif
/* Outputs from the vertex shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* uniform texture samplers */
uniform sampler2D gradient_texture;

// uniform vec2 player_pos;
// uniform vec2 window_size; // in pixels
void main (void){
  
  gl_FragColor = vec4(frag_color);
  
  //gl_FragColor = vec4(1.,0.,0.,1.);
}
[INFO   ] [Loading shader]: graph_renderer.glsl
---VERTEX SHADER---
#version 120
#ifdef GL_ES
    precision highp float;
#endif
 
/* Outputs to the fragment shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* vertex attributes */
attribute vec2     v_pos;



/* uniform variables */
uniform mat4       modelview_mat;
uniform mat4       projection_mat;
uniform vec4       color;
uniform float      vmin; // scales gradient
uniform float      vmax; // scales gradient

void main() {
  frag_color = color;
  tex_coord0 = vec2(0.0,(v_pos.y-vmin)/(vmax-vmin));
  gl_Position = projection_mat * modelview_mat * vec4(v_pos.xy, 0.0, 1.0);
}

---FRAGMENT SHADER--- 
#version 120
#ifdef GL_ES
    precision highp float;
#endif

/* Outputs from the vertex shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* uniform texture samplers */
uniform sampler2D gradient_texture;

uniform vec2 player_pos;
uniform vec2 window_size; // in pixels
void main (void){
  
  vec4 t = texture2D(gradient_texture, tex_coord0);
  gl_FragColor = vec4(t.rgb,1.0);
  
}

/* Local Variables: */
/* compile-command: "cd .. && python main.py" */
/* python-main-file: "main.py" */
/* python-working-dir: "../" */
/* End: */

[INFO   ] [Loading shader]: graph_renderer.glsl
---VERTEX SHADER---
#version 120
#ifdef GL_ES
    precision highp float;
#endif
 
/* Outputs to the fragment shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* vertex attributes */
attribute vec2     v_pos;



/* uniform variables */
uniform mat4       modelview_mat;
uniform mat4       projection_mat;
uniform vec4       color;
uniform float      vmin; // scales gradient
uniform float      vmax; // scales gradient

void main() {
  frag_color = color;
  tex_coord0 = vec2(0.0,(v_pos.y-vmin)/(vmax-vmin));
  gl_Position = projection_mat * modelview_mat * vec4(v_pos.xy, 0.0, 1.0);
}

---FRAGMENT SHADER--- 
#version 120
#ifdef GL_ES
    precision highp float;
#endif

/* Outputs from the vertex shader */
varying vec4 frag_color;
varying vec2 tex_coord0;

/* uniform texture samplers */
uniform sampler2D gradient_texture;

uniform vec2 player_pos;
uniform vec2 window_size; // in pixels
void main (void){
  
  vec4 t = texture2D(gradient_texture, tex_coord0);
  gl_FragColor = vec4(t.rgb,1.0);
  
}

/* Local Variables: */
/* compile-command: "cd .. && python main.py" */
/* python-main-file: "main.py" */
/* python-working-dir: "../" */
/* End: */

ENV. CHEMS ARE INFLUENCING SURFACE TENSION. IS THAT GOOD OR BAD?
[INFO   ] [Base   ] Leaving application in progress...
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>title</title>
    <link rel="stylesheet" href="style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <!-- page content -->
  </body>
</html>

Compilation finished at Tue Oct 22 22:34:50
